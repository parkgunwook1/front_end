<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/ch3_JS/css/common.css">
    <script>
        window.onload = function() {
            const buttons = document.getElementsByTagName("button");
            for(let button of buttons){
                button.innerText = "확인"
            }
        }
    </script>
</head>
<body>

    <h1>배열</h1>

    <p>
        자바스크립트에서는 변수 선언시 별도의 자료형 지정이 없기 때문에 <br>
        어떤 자료형의 값들이던 전부 하나의 배열공간에 담을수 있다.(자바 컬렉션과 유사)
    </p>

    <button onclick="">확인</button>

    <div id="area1" class="area small"></div>

    <script>
        function arrayTest1(){

            const arr = ["홍길동","민경민","푸바오",20,true,{name:'아이바오'},null, undefined, [1,2,3]]; // 배열객체
            
            console.log(arr);
            console.log(arr[0]);
            console.log(arr[arr.length-1] [arr[arr.length-1].length - 1]);

            // for in 문 -> 객체를 반복시킬때 사용하는것을 권장하는 향상된 반복문
            for(let item in arr){ // item -> 현재 키(인덱스) 값이 담김
                area1.innerHTML += arr[item] + "<br>";
            }
            // for of 문 -> 배열을 반복시킬때 사용하는것을 권장하는 향상된 반복문
        }
        btn1.onclick = arrayTest1;
    </script>

    <h3> 배열의 선언</h3>

    <p>
        배열 선언 시 배열의 크기를 지정한 채로 선언하거나,
        크기를 지정하지 않아도 됨(크기는 제약이 없다.)
    </p>

    <button onclick="arrayTest2();"></button>

    <script>
        const arrayTest2 = function(){
            const arr1 = new Array(); // 배열의 크기가 0인  빈 배열
            const arr2 = new Array(2); // 배열의 크기가 2인 빈 배열
            const arr3 = [];  // 배열의 크기가 0인 빈 배열

            console.log(arr1);
            console.log(arr2);
            console.log(arr3);

            // 배열에 값 대입
            arr1[0] = "banana";
            arr1[1] = "apple";
            arr1[10] = "kiwi";
            console.log(arr1, arr1.length); // 베열크기는 11 (2~9는 비어있다.)

            arr2[0] = 'car';
            arr2[1] = 'train';
            arr2[2] = 'airplane';

            console.log(arr2, arr2.length);

            //배열선언과 동시에 초기화
            const arr4 = new Array("홍길동","민경민");
            const arr5 = [1,2,3,4,5];

            console.log(arr4, arr5);

        }
    </script>

    <hr>

    <h3>Array 객체의 메소드</h3>

    <h4>1) indexof(찾고자하는요소) : 배열에서 해당 요소가 위치해있는 인덱스를 반환</h4>

    <div id="area2" class="area small"></div>
    <button onclick="indexOfTest();"></button>

    <script>
        function indexOfTest(){

            const arr = ["사과","딸기","복숭아","샤인머스켓","바나나"];
            const fruit = prompt("찾고자하는 과일명을 입력하시오...");

            const index = arr.length(fruit); // 배열에 존재하지 않을경우 -1을 반환

            //찾고자 하는 과일이 있을경우 : 당신이 찾는과일 xxx는 x번째 인덱스에 있습니다.
            // 찾고자하는 과일이 없을 경우 : 당신이 찾는과일 xxx는 판매하지 않습니다.
            // area2내부에 출력하기. 
            arr2.innerHTML = index > -1 ? `당신이 찾는과일 ${fruit}는 ${index}번째 인덱스에 있습니다.` : `당신이 찾는과일 {fruit}는 판매하지 않습니다.`

            //includes
            const bool = arr.includes(fruit); // arr 배열에 fruit 존재하면 true / 존재하지 않으면 false

            console.log("1 == 1 ?",1 == 1);
            //true => 동등연산자 : 자료형과 무관하게 실제 값만 일치하면 true
            console.log("1 == '1' ?", 1=='1');
            //true

        }
    </script>

    <hr>

    <h4>2) concat(배열, 배열, ...) : 여러개의 배열을 합치고자 할때 사용</h4>
    
    <div id="area3" class="area big"></div>
    <button id="btn2"></button>

    <script>
        btn2.onclick = () => {
            const arr1 = ['사과',"망고"];
            const arr2 = ['자동차',"자전거","오토바이"];

            area3.innerHTML += `arr1 : ${arr1}<br>`;
            area3.innerHTML += `arr2 : ${arr2}<br>`;

            area3.innerHTML += `arr1기준으로 배열을 합친 배열 : ${arr1.concat(arr2)}<br>`;
            area3.innerHTML += `arr1 : ${arr1}<br>`;
            // 원본배열에 영향을 끼치지 않는 메소드
            // 두개의 배열을 합쳐서 "새로운 배열"로 반환

            area3.innerHTML = `arr2기준으로 배열 합친 배열 : ${arr2.concat(arr1)}<br>`;
            area3.innerHTML = `여러개의 배열 합친 배열 : ${arr2.concat(arr1, [1,2,3], ["자동차"])}<br>`;

        }
    </script>

    <hr>

    <h4>3) reverse(): 배열에 담긴 값들을 역순으로 바꿔주는 메소드</h4>
    <div id="area4" class="area small"></div>
    <button onclick="reversTest();"></button>

    <script>
        function reversTest(){
            const arr = [1,2,3,4,5];

            area4.innerHTML += `arr : ${arr}<br>`; //1,2,3,4,5
            area4.innerHTML += `reverse 결과 : ${arr.reverse()}<br>`; //5,4,3,2,1
            area4.innerHTML += `arr : ${arr}<br>`; //1,2,3,4,5
        }
    </script>

    <hr>

    <h4> 배열 반복문</h4>

    <script>
        let arr = ["소금","삼겹살","후추","쌈장"];

        // 기본 반복문
        for(let i = 0; i<arr.length; i++){
            console.log(arr[i]);
        }

        // 향상된 반복문
        for(let value of arr){ // of문 (배열에 사용)
            console.log(value);
        }

        for(let key in arr){ //in문 (객체에 사용)
            console.log(arr[key]);
        }

        // 배열을 비우는 방법
        arr.length = 0; // 내부데이터도 전부 날라감

        let arr2 = [1,2,3,4,5];
        arr2.length = 2; // [1,2]
    </script>

    <hr>

    <h4> 배열을 통한 반복작업(forEach)</h4>

    <script>
        const forEachTest = () => {

            const arr = [1,2,3,4,5];

            arr.forEach( function( item, idex, array ){
                console.log(`${item}은 ${array}의 ${index}에 위치해 있습니다.`)
            } )
            const fnTest = (item, index, array) => {
                console.log(`${item}은 ${array}의 ${index}에 위치해있습니다.`);
            }

            arr.forEach( fnTest);

            //배열의 요소를 통해서도 사용이 가능
           [1,2,3,4,5,6,7].forEach(alert);
        } 
    </script>

    <h4> 배열 탐색(find, filter)</h4>
    <p>
        객체로 이루어진 배열에서 내가 원하는 값만 찾을 때 사용
    </p>
    <script>
        function findFilterTest(){
            let users = [
                {id:'alsrudals', name:'건욱'},
                {id:'alsrudals1', name:'건욱1'},
                {id:'alsrudals2', name:'건욱2'},
                {id:'alsrudals3', name:'건욱3'},
        ];

        let mkm;

        //find 함수를 사용해서 id값이 alsrudals인 user객체 찾기

        mkm = users.find( function(item, index, array){
            // id값이 alsrudals과 같은 요소
            if(item.id == 'alsrudals'){
                return true;
            }
        });
        console.log(mkm);

        let filteredArray; // undefind

        filteredArray = users.filter( (item,index,array) => item.id.includes('alsrudals'))
            
        console.log('filteredArray' , filteredArray);
        }
    </script>
    
    <h4> 배열 변형(map)</h4>

    <p>
        현재 배열을 바탕으로 각 요소에 함수를 호출하여 변경된 결과값을 반환함
    </p>
    <script>
        function mapTest(){
            // 기본형태
            const result = [1,2,3,4,5].map( function (item, index, array){
                //map 함수는 return 되는 값들을 map 함수내부의 []에 담아서 변환해준다.
                return item * idnex; //
            })
        }
    </script>
    
</body>
</html>