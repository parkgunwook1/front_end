<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>

    <h3>2. 자바 스크립트란</h3>
    <p>
        웹 브라우저에서 가장 많이, 가장 기본적으로 사용되는 "인터프리티" 방식의 스크립트 언어<Br>
        - 자바 : 컴파일 방식 -> 컴파일 과정을 거치고 나서 실행이 된다 <br>
        - 자바스크립트 : 인트퍼리터방식 -> 컴파일을 거치지 않고 곧바로 실행이 된다. <br>
                         (브라우저에 html 문서가 로딩 될 때 코드를 한줄씩 읽어내는 방식)
    </p>

    <!--
        자바는 컴파일방식 + 인터프리터방식 이라는 의견
        => 소스코드를 한번 다 읽어내고나서 프로그램 실행
        .java => .class(컴파일) => 실행 => 인터프리터방식으로 한줄씩 실행
        => 컴파일방식은 코드상에 문법적인 에러를 컴파일 단계에서 빨같 밑줄로 알려준다.

        인터프리터 방식
        -> 실행되면서 소스코드를 한줄씩 읽어내면서 바로 실행(실시간으로 텍스트를 분석해서 실행됨)
        -> 코드상에 문법적인 문제가 있다면 바로 알려주지 않고 실행시점에서 알려줌. (자바에 비해 오류찾기 힘들다.)
    -->

    <br>

    <h3>3. 장단점</h3>
    <h4> 장점</h4>
    <ui>
    <li>
        요소에 이벤트가 발생했을 때 코드를 한줄씩 읽어 나가면서 수행되기 때문에 수행속도가 빠름
    </li>
    <li>
        간단한 코드 작성으로 초보자가 접하기 쉬운 언어(단순한 구조, 원칙)<br>
        ex) 접근제한자의 개념 x, 메소드 정의시 반환형 x, 변수 선언시 자료형지정 x
    </li>
</ui>

     <h4> 단점</h4>
     <ul>
        <li>웹에 특화된 기술 => 내부에서 제공되는 기능이 제한적임</li>
        <li>HTML 내에 소스코드를 작성하게 되면 외부에 공개됨</li>
     </ul>

     <br>

     <h3>4. 자바스크립트 소스코드 작성 위치에 따른 종류</h3>
     <ol>
        <li style="color: red;">
            inline(인라인) : 이벤트를 부여하고자하는 요소 내에 간단한 소스코드를 작성해서
            실행되게하는 방법</li>
        <li>
            internal(내부) : 현재 html 문서 내에 script 태그 영역에 소스코드를 작성해서
            실행되게 하는 방법
        </li>
        <li>
            external(외부) : 소스코드들을 별도의 .js파일로 작성해서 가져다가 실행되게 하는 방법
        </li>
     </ol>

     <h4>1) inline(인라인) 방식</h4>
     <p>
        태그 내에 직접적으로 실행할 간단한 소스코드를 작성해서 실행시킴. 
        주로 실행해야 되는 소스코드가 매우 소량일 경우 사용 <br>

        [표현법]<br>
        &lt; 태그명 이벤트속성="해당 요소에 해당 이벤트가 발생했을때 실행할 소스코드"&gt;
     </p>
     <!-- 버튼이 클릭되는 순간 알람창 띄어보기-->
     <form action="aaa">
     <button onclick="window.alert('버튼클릭')">알람창 출력</button>
     <!-- 콘솔창(개발자 도구 탭) : 주로 디버깅할 용도-->
     <button type="button" onclick="window.console.log">콘솔창 출력</button>
    </form>

    <br>

    <h4>2) internal (내부) 방식</h4>
    <p>
        script 태그 영역에 함수단위로 소스코드들을 작성해 놓고 <br>
        어떤 요소에 어떤 이벤트 발생시 해당 함수를 호출함으로써 실행시키는 방식<br>
        - script태그는 html 페이지 어느위치에든 다 작성 가능하다. 
    </p>
    <!-- 인라인방식 + 내부방식 => 스크립트 함수 가져오기-->
    <button onclick="abc();">알림창 출력</button>

    <!-- 내부 ㅂ방식 -->
    <button id="btn">콘솔창 출력</button>

    <script>
        // 자바스크립트 소스코드를 기술할 수 있는 영역
        /*
          여러줄 주석 => 주석은 자바와 동일하다.
        */

        // 매개변수 없는 단순한 함수 만들기
        // abc라는 이름의 함수를 선언(선언적 함수라고 부름)
        function abc(){
            // 현재 함수가 호출시 실행할 코드를 기술하는 영역
            window.alert('버튼 클릭 !')
        }

        //1) 이벤트를 적용시키고자하는 요소 객체를 선택후 변수에 담기 => id : btn
        var btn = document.getElementById("btn");
        console.log(btn);

        //2) 선택된 요소의 이벤트 속성에 접근해서 해당 이벤트 발생시 실행시킬 함수를 대입
        btn.onclick = function () { /* 익명함수 (이름이 없는 함수) */
            abc(); // 익명함수 내부에 미리 정의된 선언적 함수 호출 가능
        }

    </script>

    <br>

    <h4 onclick="test();">3) external(외부) 방식</h4>

    <p>
        별도의 .js파일로 소스코드를 작성하고 해당 html에 가져다가 실행하는 방법
    </p>

    <button onclick="test();">알림창 출력</button>
    <!--
        내가 가져다 쓸 외부 .js파일
        파일을 script태그의 src속성으로 연결시켜주기. 
    -->
    <script src="/ch3_JS/test.js"> </script>


     <br><br>
     <br><br>
     <br><br>
     <br><br>
     <br><br>
     <br><br>


</body>
</html>